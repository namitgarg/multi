<?php
/**
 * @file
 * Render an video schema in json ld format after data submission.
 */

/**
 * Implements hook_field_info().
 */
function video_schema_field_info() {

  return array(
    'video_schema' => array(
      'label' => t('Video schema'),
      'description' => t('Custom video schema field'),
      'default_widget' => 'video_schema_wid_form',
      'default_formatter' => 'video_schema_format',
    ),
  );
}

/**
 * Implements hook_field_is_empty().
 */
function video_schema_field_is_empty($item, $field) {
  return empty($item);
}

/**
 * Implements hook_field_widget_info().
 */
function video_schema_field_widget_info() {
  return array(
    'video_schema_wid_form' => array(
      'label' => t('Video schema form'),
      'field types' => array('video_schema'),
      'behaviours' => array(
        'multiple_values' => FIELD_BEHAVIOR_DEFAULT,
        'default_value' => FIELD_BEHAVIOR_DEFAULT,
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function video_schema_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  if ($instance['widget']['type'] == 'video_schema_wid_form') {

    $element['video_title'] = array(
      '#type' => 'textfield',
      '#title' => t('Video title'),
      '#required' => TRUE,
      '#default_value' => isset($items[$delta]['video_title']) ? $items[$delta]['video_title'] : 'Video title',
    );

    $element['video_desc'] = array(
      '#type' => 'textarea',
      '#title' => t('Video description'),
      '#required' => TRUE,
      '#default_value' => isset($items[$delta]['video_desc']) ? $items[$delta]['video_desc'] : 'Video description',
    );

    $element['video_thumb_url'] = array(
      '#type' => 'textfield',
      '#title' => t('Video thumbnail url'),
      '#required' => TRUE,
      '#default_value' => isset($items[$delta]['video_thumb_url']) ? $items[$delta]['video_thumb_url'] : 'Video thumbnail image url',
    );

    $element['video_upload_date'] = array(
      '#type' => 'textfield',
      '#title' => t('Video upload date'),
      '#description' => t('Format should be y-m-d H:i:s'),
      '#required' => TRUE,
      '#default_value' => isset($items[$delta]['video_upload_date']) ? $items[$delta]['video_upload_date'] : format_date(time(), 'custom', 'y-m-d H:i:s') ,
    );

    $element['video_duration'] = array(
      '#type' => 'textfield',
      '#title' => t('Video duration'),
      '#required' => TRUE,
      '#description' => t("Format should be i.e : PT1M33S"),
      '#default_value' => isset($items[$delta]['video_duration']) ? $items[$delta]['video_duration'] : 'PT1M33S',
    );

    $element['video_content_url'] = array(
      '#type' => 'textfield',
      '#title' => t('Video content url'),
      '#default_value' => isset($items[$delta]['video_content_url']) ? $items[$delta]['video_content_url'] : NULL,
    );

    $element['video_embed_url'] = array(
      '#type' => 'textfield',
      '#title' => t('Video embed url'),
      '#default_value' => isset($items[$delta]['video_embed_url']) ? $items[$delta]['video_embed_url'] : NULL,
    );

  }
  return $element;
}



/**
 * Implements hook_field_formatter_info().
 */
function video_schema_field_formatter_info() {
  return array(
    'video_schema_format' => array(
      'label' => t('Default'),
      'field_types' => array('video_schema'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function video_schema_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {

  $element = array();
  switch ($display['type']) {
    case 'video_schema_format':
          foreach ($items as $delta => $item) {
        $element[$delta]['#markup'] = theme('video_schema_formatter_default', $item);
          }
      break;
  }
  return $element;

}

/**
 * Add field to node view of video type.
 */
function video_schema_node_view($node, $view_mode = 'full', $langcode = NULL) {

  foreach ($node->content as $values) {

    if ((isset($values['#field_type'])) && $values['#field_type'] == "video_schema") {

      $schema_field = $values['#field_name'];
      $sch_obj = $values['#object'];

      foreach ($sch_obj as $obj_key => $single_schema) {

        if ($obj_key == $schema_field) {

          foreach ($single_schema[LANGUAGE_NONE] as $schemavalues) {

            $schema[] = array(

              'video_title' => $schemavalues['video_title'],
              'video_desc' => $schemavalues['video_desc'],
              'video_thumb_url' => $schemavalues['video_thumb_url'],
              'video_upload_date' => $schemavalues['video_upload_date'],
              'video_duration' => $schemavalues['video_duration'],
              'video_content_url' => $schemavalues['video_content_url'],
              'video_embed_url' => $schemavalues['video_embed_url'],

            );
          }
        }

      }

      $schema_field = "";

    }

  }

  $node->content['schema_format_data'] = array(
    '#markup' => video_schema_getproperdata($schema),
  );

  return $node;

}

/**
 * Render data in script format.
 */
function video_schema_getproperdata($schema) {
  $return = "";
  foreach ($schema as $sch_data) {

    $return .= '<script type="application/ld+json">' . PHP_EOL . '
{
"@context": "http://schema.org",
"@type": "VideoObject",' . PHP_EOL;

    if (isset($sch_data['video_title']) && !empty($sch_data['video_title'])) {

      $return .= '"name": "' . $sch_data['video_title'] . '",' . PHP_EOL;
    }

    if (isset($sch_data['video_desc']) && !empty($sch_data['video_desc'])) {

      $return .= '"description": "' . $sch_data['video_desc'] . '",' . PHP_EOL;

    }

    if (isset($sch_data['video_thumb_url']) && !empty($sch_data['video_thumb_url'])) {

      $return .= '"thumbnailUrl": "' . $sch_data['video_thumb_url'] . '",' . PHP_EOL;

    }

    if (isset($sch_data['video_upload_date']) && !empty($sch_data['video_upload_date'])) {

      $return .= '"uploadDate": "' . $sch_data['video_upload_date'] . '", ' . PHP_EOL;

    }

    $content_url_comma_double = video_schema_check_field_data_comma_double(trim($sch_data['video_content_url']), trim($sch_data['video_embed_url']));

    if (isset($sch_data['video_duration']) && !empty($sch_data['video_duration'])) {

      $return .= '"duration": "' . $sch_data['video_duration'] . '"' . $content_url_comma_double . PHP_EOL;

    }

    $content_url_comma = video_schema_check_field_data_comma($sch_data['video_embed_url'], 'video_content_url');

    if (isset($sch_data['video_content_url']) && !empty($sch_data['video_content_url'])) {

      $return .= '"contentUrl": "' . $sch_data['video_content_url'] . '" ' . $content_url_comma . PHP_EOL;

    }

    if (isset($sch_data['video_embed_url']) && !empty($sch_data['video_embed_url'])) {

      $return .= '"embedUrl": "' . $sch_data['video_embed_url'] . '"';

    }

    $return .= PHP_EOL . ' }
  </script>';
  }
  return $return;
}

/**
 * Function to replace ',' if its last row of schema.
 */
function video_schema_check_field_data_comma($field, $type) {
  // $comma= '';.
  switch ($type) {
    case 'video_content_url':
      if (isset($field) && !empty($field)) {
        return ',';
      }
      else {
        return '';
      }
      break;
  }
}

/**
 * Function to replace ',' if its last row of schema.
 */
function video_schema_check_field_data_comma_double($field1, $field2) {

  if (isset($field1) && !empty($field1) && isset($field2) && !empty($field2)) {
    return ',';
  }
  elseif ((isset($field1) && !empty($field1)) || (isset($field2) && !empty($field2))) {
    return ',';
  }
  else {
    return '';
  }
}
